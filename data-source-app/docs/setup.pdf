# PostgreSQL Metadata App - Setup Guide

## Overview
This guide will help you set up the PostgreSQL Metadata App on your local machine and get started with extracting metadata and quality metrics from your PostgreSQL databases.

## Prerequisites

### System Requirements
- **Operating System**: Windows, macOS, or Linux
- **Python**: Version 3.11 or higher
- **Memory**: At least 4GB RAM (8GB recommended for large databases)
- **Disk Space**: 100MB for application + space for output files

### Database Requirements
- **PostgreSQL**: Version 10 or higher
- **Database Access**: Read permissions on target schemas
- **Network**: Access to PostgreSQL server (local or remote)

## Installation Steps

### Step 1: Download and Extract
1. Download the application from the repository
2. Extract to your desired location:
   ```bash
   unzip postgres-metadata-app.zip
   cd postgres-metadata-app
   ```

### Step 2: Install Python Dependencies
1. Ensure Python 3.11+ is installed:
   ```bash
   python --version
   ```

2. Install required packages:
   ```bash
   pip install -r requirements.txt
   ```

   Or install in a virtual environment (recommended):
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   pip install -r requirements.txt
   ```

### Step 3: Configure Database Connection
1. Copy the example configuration:
   ```bash
   cp config.yml.example config.yml
   ```

2. Edit `config.yml` with your database details:
   ```yaml
   database:
     dsn: "postgresql://username:password@localhost:5432/database_name"
   ```

   Or use individual parameters:
   ```yaml
   database:
     host: localhost
     port: 5432
     database: your_database
     user: your_username
     password: your_password
   ```

### Step 4: Test Installation
1. Test database connection:
   ```bash
   python -m src.app scan --schema public --verbose
   ```

2. If successful, you should see output similar to:
   ```
   ðŸ”Œ Testing database connection...
   âœ… Connected to PostgreSQL: PostgreSQL 15.0
   ðŸ“Š Extracting metadata for schemas: ['public']
   âœ… Metadata extraction completed
   ```

## Quick Start with Sample Data

### Option 1: Use Sample Data Script
1. Run the sample data population script:
   ```bash
   ./scripts/populate_sample.sh
   ```

2. Extract metadata from sample data:
   ```bash
   python -m src.app scan --schema ecommerce --format both
   ```

### Option 2: Manual Sample Data Loading
1. Connect to your PostgreSQL database
2. Run the sample schema:
   ```bash
   psql -d your_database -f sample_data/sample_schema.sql
   ```

3. Update config to include ecommerce schema:
   ```yaml
   schemas:
     - ecommerce
   ```

## Configuration Options

### Database Connection
- **DSN Format**: `postgresql://user:password@host:port/database`
- **Individual Parameters**: host, port, database, user, password
- **Environment Variables**: POSTGRES_HOST, POSTGRES_PORT, etc.

### Target Schemas
- **Specific Schemas**: List schemas to scan
- **All Schemas**: Leave empty to scan all available schemas
- **Exclude System Schemas**: Automatically excludes information_schema, pg_catalog

### Quality Metrics
- **Sample Limit**: Maximum rows to analyze for large tables (default: 10,000)
- **Top-K Values**: Number of most frequent values to extract (default: 10)
- **Null Analysis**: Enable/disable null count analysis
- **Distinct Analysis**: Enable/disable distinct value analysis

### Output Configuration
- **JSON Directory**: Location for JSON exports
- **CSV Directory**: Location for CSV exports
- **Auto-create Directories**: Automatically create output directories

## Environment Variables

You can use environment variables instead of config file:

```bash
export POSTGRES_HOST=localhost
export POSTGRES_PORT=5432
export POSTGRES_DB=your_database
export POSTGRES_USER=your_username
export POSTGRES_PASSWORD=your_password
```

Or use a DSN:
```bash
export POSTGRES_DSN=postgresql://user:password@host:port/database
```

## Troubleshooting

### Common Installation Issues

1. **Python Version Error**
   - Ensure Python 3.11+ is installed
   - Check with `python --version`
   - Use `python3` if `python` points to older version

2. **Permission Denied (Linux/macOS)**
   - Make scripts executable: `chmod +x scripts/populate_sample.sh`
   - Check file permissions

3. **Package Installation Failed**
   - Update pip: `pip install --upgrade pip`
   - Use virtual environment
   - Check internet connection

4. **Database Connection Failed**
   - Verify connection parameters
   - Check if PostgreSQL is running
   - Test connection with psql
   - Check firewall settings

### Database Permission Issues

1. **Insufficient Permissions**
   - Grant SELECT on target schemas
   - For quality metrics, grant access to pg_stat_user_tables
   - Example:
     ```sql
     GRANT SELECT ON SCHEMA public TO your_user;
     GRANT SELECT ON ALL TABLES IN SCHEMA public TO your_user;
     ```

2. **Schema Not Found**
   - Check schema names are correct
   - Use `\dn` in psql to list schemas
   - Ensure schemas exist and are accessible

### Performance Issues

1. **Large Database Timeout**
   - Increase sample_limit in config
   - Process schemas individually
   - Use database connection pooling

2. **Memory Issues**
   - Reduce sample_limit
   - Process smaller batches
   - Increase system memory

## Next Steps

After successful setup:

1. **Explore Sample Data**: Run quality metrics on sample data
2. **Configure Your Database**: Update config for your production database
3. **Customize Output**: Adjust output formats and directories
4. **Add Business Context**: Create YAML metadata files
5. **Automate**: Set up scheduled runs for regular analysis

## Support

If you encounter issues:
1. Check this setup guide
2. Review the main README.md
3. Check GitHub issues
4. Create a new issue with:
   - Operating system
   - Python version
   - PostgreSQL version
   - Error messages
   - Configuration details (without passwords)

